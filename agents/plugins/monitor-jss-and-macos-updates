#!/bin/bash
#
# Parse JSS for computer records and query them for available software updates
#
# by Thomas Kaiser <t.kaiser@arts-others.de>
#
# Needs to run on a managed macOS host to read out the JSS URL and xmlstarlet
# to parse the XML from JSS API. Logon credentials for API access need to be
# put in /etc/jss-credentials (onyl readable by root!)
#
# Idea is that a couple of Macs are servers and are already monitored in
# Checkmk. We use 2 smartgroups to differentiate between those and normal
# clients that are not monitored directly.
# - $AllMacsID defines the ID of a smartgroup containing all Macs
# - $ClientsID defines the ID of a smartgroup only containing clients
# - the difference between both groups will be treated as 'servers'
#
# 'servers' get an own service called "Software Updates" via Checkmk's
# piggyback mechanism. The 'client' macs appear each as an individual
# service "Software Updates $hostname" on the host this check runs on.
#
# I used the MRPE report variant since I like spaces in service names.
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
# 
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# check xmlstarlet, if not installed get it with your package manager
# of choice for example via 'brew install xmlstarlet' on macOS.
type xmlstarlet >/dev/null 2>&1 || \
	(echo 'UNKN - xmlstarlet not available. Please install using the package manager of your choice' ; exit 3)

credentialPermissions="$(ls -la /etc/jss-credentials | awk -F" " '{print $1}')"
case ${credentialPermissions} in
	*------)
		read jssCredentials </etc/jss-credentials
		;;
	*)
		echo 'UNKN - /etc/jss-credentials must only be readable by root'
		exit 3
		;;
esac

# get JSS URL, works only on a managed client. if you run this on an unmanagend
# host provide jssURL="https://your.jss.url:8443/" instead
jssURL="$(defaults read /Library/Preferences/com.jamfsoftware.jamf.plist jss_url)"

if [ -z "${jssCredentials}" -o -z "${jssURL}" ]; then
	echo 'UNKN - Can not access JSS credentials and/or get JSS API URL'
	exit 3
fi

# define IDs of the smart groups containing all macs and those that are only clients
AllMacsID=1
ClientsID=152

# Get time now
TimeNow=$(date "+%s")

# define checks as functions
CheckSoftwareUpdates() {
	# check when last 'jamf recon' was running on the client
	LastReportDate=$(( $(curl -H "Accept: application/xml" -sfku ${jssCredentials} \
		${jssURL}JSSResource/computers/id/${1} | xmlstarlet sel -T -t -m /computer/general \
		-v report_date_epoch -n -) / 1000 ))
	TimeDiff=$(( ${TimeNow} - ${LastReportDate} ))
	if [ ${TimeDiff} -gt 1209600 ]; then
		ReportStatus="$(( ${TimeDiff} / 604800 )) weeks old"
	elif [ ${TimeDiff} -gt 86400 ]; then
		ReportStatus="$(( ${TimeDiff} / 86400 )) days old"
	elif [ ${TimeDiff} -gt 7200 ]; then
		ReportStatus="$(( ${TimeDiff} / 3600 )) hours old"
	else
		ReportStatus="$(( ${TimeDiff} / 60 )) minutes old"
	fi
	# check whether software updates are pending
	curl -H "Accept: application/xml" -sfku ${jssCredentials} ${jssURL}JSSResource/computers/id/${1} \
		| xmlstarlet sel -T -t -m /computer/software/available_software_updates -v name -n - \
		| sed '/^$/d' >"${TmpFile}"
		echo '<<<mrpe>>>'
		if [ -s "${TmpFile}" ]; then
			# if there are updates pending report them with status CRIT if older than 5 days or
			# status WARN if below and use the count of updates as performance data to generate
			# graphs. Helps identifying lazy users...
			CountOfUpdates=$(wc -l <"${TmpFile}" | tr -d '[:space:]')
			if [ ${TimeDiff} -ge 432000 ]; then
				echo "(${0##*/}) Software%20Updates%20${2} 2 CRIT - ${CountOfUpdates} updates pending ($(sed 's/-$//' <"${TmpFile}" | tr "\n" "," | sed -e 's/,/, /g' -e 's/,\ $//'), ${ReportStatus})|updates_pending=${CountOfUpdates}"
			else
				echo "(${0##*/}) Software%20Updates%20${2} 1 WARN - ${CountOfUpdates} updates pending ($(sed 's/-$//' <"${TmpFile}" | tr "\n" "," | sed -e 's/,/, /g' -e 's/,\ $//'), ${ReportStatus})|updates_pending=${CountOfUpdates}"
			fi
		else
			if [ ${TimeDiff} -ge 777600 ]; then
				# if last recon is 9 days ago switch to status UNKNOWN
				echo "(${0##*/}) Software%20Updates%20${2} 3 UNKNOWN - outdated report (${ReportStatus})|updates_pending=0"
			else
				echo "(${0##*/}) Software%20Updates%20${2} 0 OK - no updates pending (${ReportStatus})|updates_pending=0"
			fi
		fi
} # CheckSoftwareUpdates

# Query JSS API and use smart groups 1 (all macs) and 152 (clients) to process clients
# directly and the difference between both groups as piggybacked servers.
# Piggybacked servers will get a service "Software Updates" directly while all other
# Macs will appear as services "Software Updates $hostname" on the host this check runs
# on (though you can piggyback this as well, see comments below)
SearchByGroups() {
	TmpDir="$(mktemp -d /tmp/${0##*/}.XXXXXX)"
	trap "rm -rf \"${TmpDir}\" ; exit 0" 0 1 2 3 15
	
	ListAllMacs="${TmpDir}/all-macs"
	ListClients="${TmpDir}/client-macs"
	TmpFile="${TmpDir}/host-results"
	ClientStatus="${TmpDir}/client-status"

	curl -H "Accept: application/xml" -sfku ${jssCredentials} ${jssURL}JSSResource/computergroups/id/${AllMacsID} \
		| xmlstarlet sel -T -t -m /computer_group/computers/computer -v "concat(id,' ',name)" -n - >"${ListAllMacs}"
	curl -H "Accept: application/xml" -sfku ${jssCredentials} ${jssURL}JSSResource/computergroups/id/${ClientsID} \
		| xmlstarlet sel -T -t -m /computer_group/computers/computer -v "concat(id,' ',name)" -n - >"${ListClients}"

	# check results. If empty then report status "JSS Health" as CRIT
	echo '<<<mrpe>>>'
	if [ -s "${ListAllMacs}" ]; then
		echo "(${0##*/}) JSS%20Health 0 OK - JSS seems to be running fine"
		# parse clients only and generate service below this host
		cat "${ListClients}" | while read ; do
			set $REPLY
			ComputerID="$1"
			ComputerName="$2"
			# echo "<<<<jss>>>>" <-- set this if you want to appear these services on host 'jss'
			CheckSoftwareUpdates ${ComputerID} ${ComputerName} | tee -a "${ClientStatus}"
			# echo "<<<<>>>>" <-- Needed for piggybacked operation
		done
		
		# summarize status for all client macs
		ClientsWarn=$(grep -c "1 WARN" "${ClientStatus}")
		ClientsCrit=$(grep -c "2 CRIT" "${ClientStatus}")
		echo '<<<mrpe>>>'
		if [ ${ClientsWarn} -gt 0 -o ${ClientsCrit} -gt 0 ]; then
			echo "(${0##*/}) Software%20Updates%20All%20Clients 1 WARN - $(( ${ClientsWarn} + ${ClientsCrit} )) macs unpatched|unpatched_macs=$(( ${ClientsWarn} + ${ClientsCrit} ))"
		else
			echo "(${0##*/}) Software%20Updates%20All%20Clients 0 OK - ${CountOfUpdates} macs unpatched|unpatched_macs=0"
		fi
		
		# process difference between both lists as servers for piggyback operation
		cat "${ListAllMacs}" "${ListClients}" | sort | uniq -u | while read  ; do
			set $REPLY
			ComputerID="$1"
			ComputerName="$2"
			echo "<<<<${ComputerName}>>>>"
			CheckSoftwareUpdates ${ComputerID}
			echo "<<<<>>>>"
		done
	else
		echo "(${0##*/}) JSS%20Health 0 CRIT - can not access list of all Macs"
	fi
} # SearchByGroups

# Check timestamp prior to execution
TimeBefore=$(($(date +%s%N)/1000000))

# Query JSS
SearchByGroups

# Monitor execution time
TimeDiff=$(( $(( $(date +%s%N) / 1000000 )) - ${TimeBefore} ))
DiffInSeconds=$(awk '{printf ("%0.3f",$1/1000); }' <<<${TimeDiff})
echo '<<<mrpe>>>'
if [ ${TimeDiff} -gt 60000 ]; then
	# CRIT above 60 seconds
	echo "(${0##*/}) JSS%20Performance 2 CRIT - Query took ${DiffInSeconds} seconds|jss_query_time=${TimeDiff}"
elif [ ${TimeDiff} -gt 20000 ]; then
	# WARN above 20 seconds
	echo "(${0##*/}) JSS%20Performance 1 WARN - Query took ${DiffInSeconds} seconds|jss_query_time=${TimeDiff}"
else
	echo "(${0##*/}) JSS%20Performance 0 OK - Query took ${DiffInSeconds} seconds|jss_query_time=${TimeDiff}"
fi