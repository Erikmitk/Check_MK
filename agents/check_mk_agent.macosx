#!/bin/sh
# Check_MK Agent for Mac OS/X
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# NOTE: This agent has beed adapted from the Check_MK linux agent.

# Remove locale settings to eliminate localized outputs where possible
# Author: Christian Zigotzky <info@xenosoft.de>
# Modified by Thomas Kaiser <t.kaiser@arts-others.de>

renice 19 $$ >/dev/null 2>&1

# Remove locale settings to eliminate localized outputs where possible
export LC_ALL=C
unset LANG

export MK_LIBDIR='/usr/local/lib/check_mk_agent'
export MK_CONFDIR='/etc/check_mk'
export MK_VARDIR='/var/lib/check_mk_agent'
export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

# All executables in PLUGINSDIR will simply be executed and their
# ouput appended to the output of the agent. Plugins define their own
# sections and must output headers with '<<<' and '>>>'
PLUGINSDIR=$MK_LIBDIR/plugins

# All executables in LOCALDIR will by executabled and their
# output inserted into the section <<<local>>>. Please
# refer to online documentation for details about local checks.
LOCALDIR=$MK_LIBDIR/local

# All files in SPOOLDIR will simply appended to the agent
# output if they are not outdated (see below)
SPOOLDIR=$MK_VARDIR/spool

# close standard input (for security reasons) and stderr when not
# explicitly in debug mode.
if [ "$1" = -d ]
then
	set -xv
else
	:
	# exec <&- 2>/dev/null
fi

function run_mrpe() {
	local descr=$1
	shift
	local cmdline=$*

	echo '<<<mrpe>>>'

	PLUGIN=${cmdline%% *}
	OUTPUT=$(eval "$cmdline")

	echo -n "(${PLUGIN##*/}) $descr $? $OUTPUT" | tr \\n \\1
	echo
}

export -f run_mrpe

# Runs a command asynchronous by use of a cache file. Usage:
# run_cached [-s] NAME MAXAGE
#   -s creates the section header <<<$NAME>>>
#   -m mrpe-mode: stores exit code with the cache
#   -ma mrpe-mode with age: stores exit code with the cache and adds the cache age
#   NAME is the name of the section (also used as cache file name)
#   MAXAGE is the maximum cache livetime in seconds
function run_cached () {
	local NOW
	NOW=$(date +%s)
	local section=
	local mrpe=0
	local append_age=0
	# TODO: this function is unable to handle mulitple args at once
	#       for example: -s -m won't work, it is read as single token "-s -m"
	if [ "$1" = -s ] ; then local section="echo '<<<$2:cached($NOW,$3)>>>' ; " ; shift ; fi
	if [ "$1" = -m ] ; then local mrpe=1 ; shift ; fi
	if [ "$1" = "-ma" ] ; then local mrpe=1 ; local append_age=1 ; shift ; fi
	local NAME=$1
	local MAXAGE=$2
	shift 2
	local CMDLINE=$section$*

	if [ ! -d "$MK_VARDIR/cache" ]; then mkdir -p "$MK_VARDIR/cache" ; fi
	if [ "$mrpe" = 1 ] ; then
		CACHEFILE="$MK_VARDIR/cache/mrpe_$NAME.cache"
	else
		CACHEFILE="$MK_VARDIR/cache/$NAME.cache"
	fi

	# Check if the creation of the cache takes suspiciously long and kill the
	# process if the age (access time) of $CACHEFILE.new is twice the MAXAGE.
	# Output the eventually already cached section anyways and start the cache
	# update again.
	if [ -e "$CACHEFILE.new" ] ; then
		local CF_ATIME
		CF_ATIME=$(stat -f %Sa -t %s "$CACHEFILE.new")
		if [ $((NOW - CF_ATIME)) -ge $((MAXAGE * 2)) ] ; then
			# Kill the process still accessing that file in case
			# it is still running. This avoids overlapping processes!
			fuser -k -9 "$CACHEFILE.new" >/dev/null 2>&1
			rm -f "$CACHEFILE.new"
		fi
	fi

	# Check if cache file exists and is recent enough
	if [ -s "$CACHEFILE" ] ; then
		local MTIME
		MTIME=$(stat -f %Sm -t %s "$CACHEFILE")
		local AGE
		AGE=$((NOW - MTIME))
		if [ "$AGE" -le "$MAXAGE" ] ; then local USE_CACHEFILE=1 ; fi
		# Output the file in any case, even if it is
		# outdated. The new file will not yet be available
		if [ $append_age -eq 1 ] ; then
			# insert the cached-string before the pipe (first -e)
			# or, if no pipe found (-e t) append it (third -e),
			# but only once and on the second line (2!b) (first line is section header,
			# all further lines are long output)
			sed -e "2s/|/ (Cached: ${AGE}\/${MAXAGE}s)|/" -e t -e "2s/$/ (Cached: ${AGE}\/${MAXAGE}s)/" < "$CACHEFILE"
		else
			cat "$CACHEFILE"
		fi
	fi

	# Cache file outdated and new job not yet running? Start it
	if [ -z "$USE_CACHEFILE" ] && [ ! -e "$CACHEFILE.new" ] ; then
		# When the command fails, the output is throws away ignored
		if [ $mrpe -eq 1 ] ; then
			echo "set -o noclobber ; exec > \"$CACHEFILE.new\" || exit 1 ; run_mrpe $NAME \"$CMDLINE\" && mv \"$CACHEFILE.new\" \"$CACHEFILE\" || rm -f \"$CACHEFILE\" \"$CACHEFILE.new\"" | nohup /bin/bash >/dev/null 2>&1 &
		else
			echo "set -o noclobber ; exec > \"$CACHEFILE.new\" || exit 1 ; $CMDLINE && mv \"$CACHEFILE.new\" \"$CACHEFILE\" || rm -f \"$CACHEFILE\" \"$CACHEFILE.new\"" | nohup /bin/bash >/dev/null 2>&1 &
		fi
	fi
}

# Make run_cached available for subshells (plugins, local checks, etc.)
export -f run_cached

osver="$(sw_vers | sed 1d | tr "\n" " " | awk -F" " '{print $2" ("$4")"}')"
Hardware=$(system_profiler SPHardwareDataType | egrep "Chip|Processor Name|Model Identifier|Memory|Processor Speed" | awk -F": " '{print $2","}')

printf "<<<check_mk>>>\nVersion: $(sed 's/\,$//' <<<${Hardware})\nHostname: $(systemsetup -getcomputername | awk -F": " '{print $2}')\nAgentOS: macOS $osver\n"

echo '<<<df>>>'
# Check hfs+
df -kPT hfs | egrep -v "Time Machine|com.apple.TimeMachine.localsnapshots|/Volumes/Recovery|/private/var/vm" | \
	sed 1d | while read ; do
	set ${REPLY}
	DeviceNode=$1
	shift
	DiskSize=$1
	shift
	UsedKB=$1
	shift
	AvailableKB=$1
	shift
	Percentage=$1
	shift
	MountPoint="$@"
	echo "${DeviceNode} hfs ${DiskSize} ${UsedKB} ${AvailableKB} ${Percentage} ${MountPoint}"
done
# Check apfs. We can neither trust in "KB available" provided by df command (shared amongst all
# containers) nor in "KB used" so we have to query 'diskutil apfs' or use capacity as fallback
diskutil apfs list | grep -A3 'APFS Volume Disk' | egrep " disk|Capacity Consumed" | \
	awk -F": " '{print $2}' | awk -F" " '{print $1}' | sed 's/disk/-disk/' | tr '\n' ' ' | \
	tr '-' '\n' >/Users/Shared/.apfs-container
df -kPT apfs | egrep -v "Time Machine|com.apple.TimeMachine.localsnapshots|/Volumes/Recovery|/private/var/vm" | \
	sed 1d | while read ; do
	set ${REPLY}
	DeviceNode=$1
	shift
	DiskSize=$1
	shift
	UsedKB=$1
	shift
	AvailableKB=$1
	shift
	Percentage=$(tr -c -d '[:digit:]' <<<$1)
	shift
	MountPoint="$@"

	SearchPattern="$(cut -c-7 <<<${DeviceNode##*/})"
	ConsumedBytes=$(awk -F" " "/^${SearchPattern} / {print \$2}" /Users/Shared/.apfs-container)
	if [ "X${ConsumedBytes}" = "X" ]; then
		# fallback to capacity percentage
		UsedKBByPercentage=$(bc <<<"${DiskSize} * ${Percentage} / 100")
		echo "${DeviceNode} apfs ${DiskSize} ${UsedKB} $(( ${DiskSize} - ${UsedKBByPercentage} )) ${Percentage}% ${MountPoint}"
	else
		# use 'diskutil apfs' output
		echo "${DeviceNode} apfs ${DiskSize} ${UsedKB} $(( ${DiskSize} - $(( ${ConsumedBytes} / 1024 )) )) ${Percentage}% ${MountPoint}"
	fi
done

echo '<<<cpu>>>';
echo `sysctl -n vm.loadavg | tr -d '{}'` `nice -n20 top -l 1 -n 1 | awk '/^Processes/ {print $4"/"$2;}'` `echo 'echo $$' | bash` `sysctl -n hw.ncpu`

# compressed memory will be incorrectly reported as swap since this is macOS'
# first and usual choice if memory pressure increases
echo '<<<statgrab_mem>>>'
pagesize=$(vm_stat | grep Mach | awk '{print $8}')
compressedpages=$(vm_stat | awk '/stored in compressor:/ {print $5}' | sed 's/\.$//')
MemTotal=$(sysctl -n hw.memsize)
MemFree=$(echo "( $(vm_stat | grep speculative: | awk '{print $3}') + $(vm_stat | grep inactive: | awk '{print $3}') + $(vm_stat | grep free: | awk '{print $3}') ) * $pagesize" | bc)
SwapTotal=$(( ${compressedpages} * ${pagesize} ))
SwapFree=$(echo "( $compressedpages - $(vm_stat | grep "occupied by compressor:" | awk '{print $5}') ) * $pagesize" | bc)
echo "mem.cache 0"
echo "mem.free ${MemFree}"
echo "mem.total ${MemTotal}"
echo "mem.used $(( ${MemTotal} - ${MemFree} ))"
echo "swap.free ${SwapFree}"
echo "swap.total ${SwapTotal}"
echo "swap.used $(( ${SwapTotal} - ${SwapFree} ))"
# FIXME: Just call vm_stat here, write a check plugin that uses that
# native output of vm_stat

# Report whole vm_stat output as 'Swap and Paging' sensor to really get all
# the details and to decide how much memory is enough, see for example
# https://github.com/ThomasKaiser/Knowledge/blob/master/articles/Exploring_Apple_Silicon_on_MacBookAir10.md#testing-different-hardware-configurations-on-the-same-machine
Parse_Full_VM_Stat_Output() {
	# this will result in 24 graphs for this sensor
	vm_stat | grep -v Mach | sed -e 's/\.$//' -e 's/"//g' | while read ; do
		Attribute="$(awk -F":" '{print $1}' <<<"${REPLY}" | tr '[:upper:]' '[:lower:]' | sed 's/\ /_/g')"
		Value=$(( $(awk -F":" '{print $2}' <<<"${REPLY}") / ${ScaleFactor} ))
		printf " ${Attribute}=${Value}"
	done
} # Parse_Full_VM_Stat_Output
ParseVM_Stat_Output() {
	# this will limit the count of graphs to the reasonable ones to understand 
	# 'Is the machine's memory too low?'
	vm_stat | egrep "free|zero|ompre|ins:|outs:" | sed -e 's/\.$//' -e 's/"//g' | while read ; do
		Attribute="$(awk -F":" '{print $1}' <<<"${REPLY}" | tr '[:upper:]' '[:lower:]' | sed 's/\ /_/g')"
		Value=$(( $(awk -F":" '{print $2}' <<<"${REPLY}") / ${ScaleFactor} ))
		printf " ${Attribute}=${Value}"
	done
} # ParseVM_Stat_Output
# report values in MB instead of pages (pagesize might change between OS releases)
ScaleFactor=$(( 1048576 / ${pagesize} ))
VMStatGraph=$(ParseVM_Stat_Output)
CountOfSwapFiles=$(ls /var/vm/swapfile* 2>/dev/null | wc -l | tr -d -c '[:digit:]')
VMStatus="${CountOfSwapFiles} swapfile(s)"
if [ ${CountOfSwapFiles} -gt 1 ]; then
	CheckStatus="2 CRIT"
else
	CheckStatus="0 OK"
fi
RunningApps="$(ps auxw -o rss,vsz,command)"
AllApps=$(grep "/Applications/" <<<"${RunningApps}" | grep -c MacOS)
AdobeApps=$(grep "/Applications/" <<<"${RunningApps}" | grep -i -c adobe)
MSApps=$(grep "/Applications/" <<<"${RunningApps}" | grep -i -c microsoft)
grep -q Safari <<<"${RunningApps}" && RAMSafari=$(( $(grep Safari <<<"${RunningApps}" | awk -F" " '{sum+=$6;} END{print sum;}') / 1024 ))
grep -q Chrome <<<"${RunningApps}" && RAMChrome=$(( $(grep Chrome <<<"${RunningApps}" | awk -F" " '{sum+=$6;} END{print sum;}') / 1024 ))
grep -q Firefox <<<"${RunningApps}" && RAMFF=$(( $(grep Firefox <<<"${RunningApps}" | awk -F" " '{sum+=$6;} END{print sum;}') / 1024 ))
grep -q -i microsoft <<<"${RunningApps}" && RAMMS=$(( $(grep -i microsoft <<<"${RunningApps}" | awk -F" " '{sum+=$6;} END{print sum;}') / 1024 ))
grep -q -i adobe <<<"${RunningApps}" && RAMAdobe=$(( $(grep -i adobe <<<"${RunningApps}" | awk -F" " '{sum+=$6;} END{print sum;}') / 1024 ))

echo "<<<mrpe>>>"
echo "(${0##*/}) Swap%20and%20Paging ${CheckStatus} - ${VMStatus} | swapfiles=${CountOfSwapFiles:-0} all_apps=${AllApps:-0} adobe_apps=${AdobeApps:-0} adobe_ram=${RAMAdobe:-0} microsoft_apps=${MSApps:-0} microsoft_ram=${RAMMS:-0} safari_ram=${RAMSafari:-0} firefox_ram=${RAMFF:-0} chrome_ram=${RAMChrome:-0}${VMStatGraph}"

printf "<<<uptime>>>\n$(( $(date +%s) - $(sysctl -n kern.boottime | awk '{print $4}' | sed 's/,//') ))\n"
# FIXME: use sysctl -a for outputting *all* kernel values. Write
# checks plugins with subchecks for parsing that output. Maybe reduce
# the output size by grepping away totally useless parts

# macOS version of lnx_if.
echo '<<<lnx_if>>>'
# collect only information from active interfaces
interfaces=$(networksetup -listnetworkserviceorder | tr -d ')' | awk -F": " '/Hardware Port/ {print $3}' | sort | while read ; do ifconfig ${REPLY} >/dev/null 2>&1 && echo ${REPLY}; done)
counter=0
echo "[start_iplink]"
while read -r eth; do
	counter=$((counter+1))
	printf "${counter}: "
	ifconfig ${eth} | grep -E "mtu|ether|inet|media"
done <<< "$interfaces"
echo "[end_iplink]"

echo '<<<lnx_if:sep(58)>>>'
# https://github.com/corriou/checkmk/blob/34fc5e674309595c7d2fa31af1a156840d6d823b/agents/check_mk_agent.macosx#L98
netstat -inbd | grep -E "$interfaces" | sed -e 's/[*]//g' | \
	awk '/Link/ { print $1": "$7,$5,$6,"0","0","0","0","0",$10,$8,$9,"0","0",$11,"0","0"; }'

# Convert osx ifconfig to lnx_if format:
for eth in $interfaces; do
	cur_ifconfig=$(ifconfig -v "$eth")
	# if interface is of type Wi-Fi then report maxRate instead of link rate
	grep -q 'type: Wi-Fi' <<<"$cur_ifconfig"
	if [ $? -eq 0 ]; then
		speed="$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport "$eth" -I | awk -F": " '/maxRate/ {print $2}').00Mb/s"
	else
		speed=$(grep -E "^\s*(down)?link rate:\s*" <<<"$cur_ifconfig" | cut -d " " -f3,4 | sed -E 's, (.)bps$,\1b/s,')
	fi
	addr=$(grep -E '^\s*ether' <<<"$cur_ifconfig" | cut -d " " -f2)
	link_detected=no
	if grep -E 'status:\s*active' <<<"$cur_ifconfig" > /dev/null || [ "$eth" = "lo0" ]; then
		link_detected=yes
	fi
	grep -q "media: autoselect" <<<"$cur_ifconfig" && autoselect=on || autoselect=off

	echo "[$eth]"
	printf "\tSpeed: ${speed:-Unknown}\n"
	printf "\tAuto-negotiation: $autoselect\n"
	printf "\tLink detected: $link_detected\n"
	printf "\tAddress: ${addr:-00:00:00:00:00:00}\n"
done

echo '<<<ps>>>'
ps ax -o user,vsz,rss,pcpu,command | sed -e 1d -e 's/ *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) */(\1,\2,\3,\4) /'

# macOS 10.13 and above use timed, older variants ntpd
if [ -f /var/db/timed/com.apple.timed.plist ]; then
	:
	# TODO: parse /var/db/timed/com.apple.timed.plist and provide compatible output
	# defaults read /var/db/timed/com.apple.timed TMSystemSource | grep TMTimeError | head -n1 | awk -F'"' '{print $2}'
elif which ntpq >/dev/null; then
	echo '<<<ntp>>>'
	ntpq -np | sed -e 1,2d -e 's/^\(.\)/\1 /' -e 's/^ /%/'
fi

# TCP Conn stats
echo '<<<tcp_conn_stats>>>'
netstat -ntfinet | awk ' /^tcp/ { c[$6]++; } END { for (x in c) { print x, c[x]; } }'

# Fileinfo-Check: put patterns for files into /etc/check_mk/fileinfo.cfg
if [ -r "$MK_CONFDIR/fileinfo.cfg" ] ; then
	echo '<<<fileinfo:sep(124)>>>'
	date +%s

	OLD_IFS=$IFS
	IFS='
'
	while read -r pattern; do
		case $pattern in
			/*) for file in $pattern; do
					stat -f "%N|%z|%m" "$file" 2>/dev/null || echo "$file|missing|`date +%s`"
				done ;;
		esac
	done < "$MK_CONFDIR/fileinfo.cfg"
	IFS=$OLD_IFS
fi

# Doesn't work since 10.14 due to missing permissions for tmutil
case $osver in
	10.?.*|10.1[0-3].*)
		if type tmutil >/dev/null 2>&1
		then
			echo '<<<timemachine>>>'
			tmutil latestbackup 2>&1
		fi
		;;
esac

# temperatures and sensors, requires HardwareMonitor.app. On newer machines/OSes
# HardwareMonitor.app has no access to relevant sensors any more and if macOS'
# own powermetrics binary is available and works then it should be preferred.
if [ -x /Applications/HardwareMonitor.app/Contents/MacOS/hwmonitor ]; then
	echo '<<<lnx_thermal:sep(124)>>>'
	/Applications/HardwareMonitor.app/Contents/MacOS/hwmonitor -c 2>/dev/null | grep " C$" | while read ; do
		Temp=$(awk -F": " '{print $2}' <<<$REPLY | tr -d -c '[:digit:]')
		case $REPLY in
			SMART*)
				Sensor="$(sed 's/^SMART Disk //' <<<"$REPLY" | cut -d'(' -f1)"
				echo "${Sensor}|enabled|disk-thermal|${Temp}000|50000|passive|60000|critical"
				;;
			"SMC DRIVE BAY"*)
				Sensor="$(sed 's/^SM. //' <<<"$REPLY" | awk -F": " '{print $1}')"
				echo "${Sensor}|enabled|disk-thermal|${Temp}000|50000|passive|60000|critical"
				;;
			SMC*|SMB*)
				Sensor="$(sed 's/^SM. //' <<<"$REPLY" | awk -F": " '{print $1}')"
				echo "${Sensor}|enabled|thermal|${Temp}000|70000|passive|90000|critical"
				;;
			*)
				Sensor="$(awk -F": " '{print $1}' <<<"$REPLY")"
				echo "${Sensor}|enabled|thermal|${Temp}000|70000|passive|90000|critical"
				;;
		esac
	done
fi

# Check macOS own powermetrics tool. Please be aware that querying SMC values is not
# possible on all Mac models (fails for example on Macmini8,1, MacBookPro10,1 and all
# the M1 Macs). In such a situation try a fallback to osx-cpu-temp if installed:
# https://github.com/lavoiesl/osx-cpu-temp (really only needed on Intel Macs where
# powermetrics does not output SMC sensor data)

if type powermetrics >/dev/null 2>&1
then
	PowerMetrics=$(powermetrics -n 1 -i 1 --samplers smc 2>/dev/null | sed -e 's/: /=/g' -e 's/\ C$//' -e 's/\ rpm$//' -e 's/\ /_/g' | tr '[:upper:]' '[:lower:]' | egrep "die_temp|^fan|thermal_level")
	# for example: cpu_thermal_level=65 gpu_thermal_level=40 io_thermal_level=0 fan=1822.1 cpu_die_temperature=68.64 gpu_die_temperature=55.00
	eval ${PowerMetrics}
	if [ "X${cpu_die_temperature}" = "X" ]; then
		# empty powermetrics output so try osx-cpu-temp instead
		cpu_die_temperature=$(osx-cpu-temp 2>/dev/null | tr -d -c '[:digit:]')
		if [ "X${cpu_die_temperature}" = "X" -o "X${cpu_die_temperature}" = "X00" ]; then
			# do nothing, osx-cpu-temp isn't working properly or not installed
			:
		else
			echo "<<<lnx_thermal:sep(124)>>>"
			echo "CPU|enabled|thermal|${cpu_die_temperature}00|70000|passive|90000|critical"
		fi
	else
		# report CPU temperature and also GPU temperature if available
		echo "<<<lnx_thermal:sep(124)>>>"
		echo "CPU|enabled|thermal|$(tr -d -c '[:digit:]' <<<${cpu_die_temperature})0|70000|passive|90000|critical"
		[ "X${gpu_die_temperature}" != "X" ] && echo "GPU|enabled|thermal|$(tr -d -c '[:digit:]' <<<${gpu_die_temperature})0|70000|passive|90000|critical"
	fi
	# check for fan sensor
	if [ "X${fan}" != "X" ]; then	
		echo "<<<mrpe>>>"
		echo "(${0##*/}) Fan%20rpm 0 OK - ${fan} fan rotations per minute | fan_rpm=${fan:-0}"
	fi
	# check for thermal level sensors
	if [ "X${cpu_thermal_level}" != "X" ]; then
		if [ ${cpu_thermal_level} -ge 80 -o ${gpu_thermal_level:-0} -ge 80 -o ${io_thermal_level:-0} -ge 80 ]; then
			ThermalStatus="2 CRIT"
		elif [ ${cpu_thermal_level} -ge 60 -o ${gpu_thermal_level:-0} -ge 60 -o ${io_thermal_level:-0} -ge 60 ]; then
			ThermalStatus="1 WARN"
		else
			ThermalStatus="0 OK"
		fi
		CountOfDisplays=$(system_profiler SPDisplaysDataType | grep -c "Resolution:")
		case ${CountOfDisplays} in
			0)
				DisplayStatus="(no display connected)"
				;;
			1)
				case ${Hardware} in
					MacBook*|iMac*)
						DisplayStatus="(only internal LCD in use)"
						;;
					*)
						DisplayStatus="(one display in use)"
						;;
				esac
				;;
			2)
				DisplayStatus="(two displays in use)"
				;;
			*)
				DisplayStatus="(${CountOfDisplays} displays in use)"
				;;
		esac
		echo "<<<mrpe>>>"
		echo "(${0##*/}) Thermal%20Status ${ThermalStatus} - CPU: ${cpu_thermal_level}, GPU: ${gpu_thermal_level}, I/O: ${io_thermal_level} ${DisplayStatus} | cpu_thermal_level=${cpu_thermal_level:-0} gpu_thermal_level=${gpu_thermal_level:-0} io_thermal_level=${io_thermal_level:-0} displays=${CountOfDisplays:-0}"
	fi
fi

# Check whether iStatistica with Sensors daemon is installed to try to query the API for
# thermal sensor data and fan speeds if available: https://www.imagetasks.com/istatistica/
# You need to enable web access in iStatistica and adjust the port in case you won't stay
# with the defaults (port 4027)
#
# To get all thermal sensors (47 on Apple Silicon Macs released in Nov 2020) set the below
# to TRUE

AllSensors=FALSE
iStatisticaPort=4027

iStatisticaSensorsRunning=$(pgrep "iStatistica Sensors")
if [ "X${iStatisticaSensorsRunning}" != "X" ]; then
	echo '<<<lnx_thermal:sep(124)>>>'

	# calculate a SoC temperature averaging thermal values with "SOC" in their name
	SoCTemps=$(curl --connect-timeout 1 "http://localhost:${iStatisticaPort}/api/sensors" 2>/dev/null | awk -F'"' '/SOC/ {print $4}')
	CountOfSoCSensors=$(wc -l <<<"${SoCTemps}" | tr -d -c '[:digit:]')
	SoCAvgTemp=$(echo "$(awk -F',' '{sum+=$1;} END{print sum;}' <<<"${SoCTemps}") / ${CountOfSoCSensors} * 1000" | bc -l | cut -f1 -d'.')
	[ ${SoCAvgTemp} -eq 0 ] || echo "CPU|enabled|thermal|${SoCAvgTemp}|70000|passive|90000|critical"

	# if $AllSensors=TRUE expose each and every sensor to Check_MK
	if [ "X${AllSensors}" = "XTRUE" ]; then
		curl --connect-timeout 1 "http://localhost:${iStatisticaPort}/api/sensors" 2>/dev/null | \
			awk -F'"' '/:/ {print $2"="$4}' | sed -e 's/\ /_/g' | while read ; do
				echo "${REPLY%=*}|enabled|thermal|${REPLY##*=}000|70000|passive|90000|critical"
		done
	fi

	# check whether fan data is available
	curl --connect-timeout 1 "http://localhost:${iStatisticaPort}/api/fans" 2>/dev/null | \
		awk -F'"' '/:/ {print $2"="$4}' | sed -e 's/\ /%20/g' -e 's/%201=/=/' | while read ; do
			GraphName=$(sed -e 's/%20/_/g' <<< "${REPLY%=*}" | tr '[:upper:]' '[:lower:]')
			if [ ${REPLY##*=} -ge 5000 ]; then
				FanStatus="1 WARN"
			else
				FanStatus="0 OK"
			fi
			echo "<<<mrpe>>>"
			echo "(${0##*/}) ${REPLY%=*}%20rpm ${FanStatus} - ${REPLY##*=} fan rotations per minute | ${GraphName}=${REPLY##*=}"
	done
fi

# Check SMART if smartmontools are installed, for NVME Check_MK 1.6 or above is needed
if type smartctl >/dev/null 2>&1
then
	echo '<<<smart>>>'
	diskutil list | grep -v 'virtual)' | awk -F" " '/(internal)/ {print $1}' | while read ; do
		DNAME="$(smartctl -s on -d ata -i -f brief $REPLY | grep -v 'Family' | grep -E 'Model|^Serial Number' | sed 's/^.*\(  .*\).*$/\1/' | tr '\n' '_' | sed -e 's/  //g' -e 's/ /_/g' -e 's/_$//' -e 's/^APPLE_//')"
		if [ -n "${DNAME}" ]; then
			# SATA
			MODEL="$(sed 's/\_[^.]\{0,15\}$//g' <<<${DNAME})"
			case ${REPLY} in
				/dev/disk0)
					# report internal SSD as /dev/disk0 to be consistent with NVMe reporting
					smartctl -s on -v 9,raw48 -A $REPLY | grep -E "Offline|Always" | sed "s|^|/dev/disk0 ATA $MODEL |"
					;;
				*)
					smartctl -s on -v 9,raw48 -A $REPLY | grep -E "Offline|Always" | sed "s|^|$DNAME ATA $MODEL |"
					;;
			esac
		else
			DNAME="$(smartctl -s on -d nvme -i -f brief $REPLY | grep -v 'Family' | grep -E 'Model|^Serial Number' | sed 's/^.*\(  .*\).*$/\1/' | tr '\n' '_' | sed -e 's/  //g' -e 's/ /_/g' -e 's/_$//' -e 's/^APPLE_//')"
			if [ -n "${DNAME}" ]; then
				# NVME
				echo "${REPLY} NVME $(sed 's/\_[^.]\{0,15\}$//g' <<<${DNAME})"
				smartctl -s on -d nvme -A $REPLY | sed -e '1,5d; /^$/d'
			fi
		fi
	done
fi

# battery and charger support
ChargerWattage=$(pmset -g ac | awk -F" " '/Wattage/ {print $3}' | tr -d -c '[:digit:]')
[ "X${ChargerWattage}" = "X" ] || ChargerInfo=", ${ChargerWattage}W charger connected"
CheckBatteryHealth() {
	system_profiler SPPowerDataType | egrep "Cycle Count|Condition|Maximum Capacity|Charge Remaining|^      Serial Number" | sed -e 's/:\ /=/' -e 's/          //' | while read ; do
		case ${REPLY%=*} in
			Charge*)
				printf " charge_remaining=${REPLY##*=}"
				;;
			Maximum*)
				printf " maximum_capacity=$(tr -d -c '[:digit:]' <<<${REPLY##*=})"
				;;
			Cycle*)
				printf " cycle_count=${REPLY##*=}"
				;;
			Condition)
				if [ "X${REPLY##*=}" = "XNormal" ]; then
					printf " condition=0"
				elif [ "X${REPLY##*=}" = "XService Recommended" ]; then
					printf " condition=1"
				else
					# fallback for either "Service Battery" or whatever other condition
					# Apple already defined or will define in the future.
					printf " condition=2"
				fi
				;;
			*Serial*)
				ObfuscatedChagerSerial=$(tr -d -c '[:digit:]' <<<"${REPLY##*=}")
				printf " charger_serial=${ObfuscatedChagerSerial:-0}"
				;;
		esac
	done
} # CheckBatteryHealth

BatteryHealthGraph=$(CheckBatteryHealth)
case ${BatteryHealthGraph} in
	*condition=2*)
		OKState="2 CRIT"
		BatteryHealth=", battery condition: $(system_profiler SPPowerDataType | awk -F": " '/Condition/ {print $2}')"
		;;
	*condition=1*)
		OKState="1 WARN"
		BatteryHealth=", battery condition: Service Recommended"
		;;
	*)
		OKState="0 OK"
		;;
esac
# check battery itself
pmset -g batt | grep "InternalBattery" | while read ; do
	SensorName=$(awk -F" " '{print $1}' <<<${REPLY} | tr -d -c '[:alnum:]')
	GraphName=$(tr '[:upper:]' '[:lower:]' <<<${SensorName})
	Percentage=$(awk -F";" '{print $1}' <<<${REPLY} | awk -F" " '{print $3}' | tr -d -c '[:alnum:]')
	BattStatus=$(awk -F";" '{print $2}' <<<${REPLY})
	VerboseOutput=$(awk -F";" '{print $3}' <<<${REPLY} | sed 's/\ present/, battery present/')
	case ${VerboseOutput} in
		*"not charging"*)
			OKState="1 WARN"
			;;
	esac
	Remaining=$(awk -F" " '{print $1}' <<<${VerboseOutput})
	[ "X${Remaining}" = "X" -o "X${Remaining}" = "X(no" ] || RemainingMinutes=$(( $(( ${Remaining%:*} * 60 )) + ${Remaining##*:} ))
	if [ ${Percentage} -le 10 ]; then
		CheckStatus="2 CRIT"
	elif [ ${Percentage} -le 25 ]; then
		CheckStatus="1 WARN"
	else
		CheckStatus="${OKState}"
	fi
	echo "<<<mrpe>>>"
	echo "(${0##*/}) ${SensorName} ${CheckStatus} - ${Percentage}%${BattStatus},${VerboseOutput}${BatteryHealth}${ChargerInfo} | ${GraphName}_percentage=${Percentage:-0} remaining_minutes=${RemainingMinutes:-0} charger_power=${ChargerWattage:-0}${BatteryHealthGraph}"
done

# query security updates in Apt compatible way, check every 30 minutes
RestartNeeded=0
echo '<<<apt:sep(0)>>>'
CheckNeeded=$(find /var/run/de.arts-others.softwareupdatecheck -mtime +29m 2>/dev/null)
if [ $? -ne 0 -o "X${CheckNeeded}" = "X/var/run/de.arts-others.softwareupdatecheck" ]; then
	# file doesn't exist or is older than 29 minutes -- let's (re)create it
	cp -p /var/run/de.arts-others.softwareupdatecheck /var/run/de.arts-others.softwareupdatecheck.old 2>/dev/null
	(softwareupdate -l 2>/dev/null | grep -i recommended >/var/run/de.arts-others.softwareupdatecheck) &
fi
if [ -s /var/run/de.arts-others.softwareupdatecheck.old ]; then
	awk -F',' '{print $1}' </var/run/de.arts-others.softwareupdatecheck.old | \
		sed -e 's/^	//' -e 's/\ .\ .$//' -e 's/\ /_/g' | while read ; do
		# fake Ubuntu packet report style
		echo "Inst ${REPLY} [10.1ubuntu2.5] (10.1ubuntu2.6 Ubuntu:18.04/bionic-security [amd64])"
	done
	# check for needed restarts
	RestartNeeded=$(grep -c -i 'restart' /var/run/de.arts-others.softwareupdatecheck.old)
else
	echo "No updates pending for installation"
fi

# If security updates are available, then display a nag screen to the user sitting in 
# front of the machine.

runAsUser() {
	currentUser=$(scutil <<< "show State:/Users/ConsoleUser" | awk '/Name :/ { print $3 }')
	if [[ ${currentUser} != "loginwindow" ]]; then
		uid=$(id -u "${currentUser}")
		launchctl asuser $uid sudo -u ${currentUser} "$@"
	fi
} # runAsUser

DisplayDialog() {
	runAsUser osascript -e "button returned of (display dialog \"${1}\" with  title \"${5}\" buttons {\"${2}\", \"${3}\"} default button \"${4}\" with icon POSIX file \"${6}\" giving up after ${7})"
} # DisplayDialog

NotifyUpdate() {
	message=${1}
	button1=${2}
	button2=${3}
	defaultbutton=${4}
	dialogtimeout=${5}
	title="A&O Softwareupdate"
	logo="/System/Applications/App Store.app/Contents/Resources/AppIcon.icns"

	button=$(DisplayDialog "${message}" "${button1}" "${button2}" "${defaultbutton}" "${title}" "${logo}" "${dialogtimeout}")
	if [[ ${button} != "${button2}" ]]; then
		runAsUser open /System/Library/PreferencePanes/SoftwareUpdate.prefPane
	fi
} # NotifyUpdate

# Check if reboot is needed since more than 47 hours
if [ ${RestartNeeded} -gt 0 ]; then
	if [ -f /var/run/de.arts-others.softwareupdatecheck.timestamp ]; then
		TooOld=$(find /var/run/de.arts-others.softwareupdatecheck.timestamp -mtime +47h 2>/dev/null)
	else
		date > /var/run/de.arts-others.softwareupdatecheck.timestamp
	fi
else
	rm /var/run/de.arts-others.softwareupdatecheck.timestamp 2>/dev/null
fi

# Report reboot status to Check_MK since security updates might require a restart
echo '<<<mrpe>>>'
if [ "X${TooOld}" = "X/var/run/de.arts-others.softwareupdatecheck.timestamp" ]; then
	RebootStatus="2 CRIT"
else
	RebootStatus="1 WARN"
fi
if [ ${RestartNeeded} -gt 1 ]; then
	echo "(${0##*/}) Reboot%20needed ${RebootStatus} - ${RestartNeeded} pending security updates require a restart"
elif [ ${RestartNeeded} -gt 0 ]; then
	echo "(${0##*/}) Reboot%20needed ${RebootStatus} - 1 pending security update requires a restart"
else
	echo "(${0##*/}) Reboot%20needed 0 OK - no reboot required"
fi

# Notify user about pending software updates only every 30 minutes. If a reboot is needed
# for more than 2 days then annoy the user every 30 minutes otherwise only prior to lunch
# break or home time:
if [ ${RestartNeeded} -gt 0 -a "X${CheckNeeded}" = "X/var/run/de.arts-others.softwareupdatecheck" ]; then
	if [ "X${TooOld}" = "X/var/run/de.arts-others.softwareupdatecheck.timestamp" ]; then
		# reboot needed for more than 2 days now. Let's annoy the user with a warn dialog
		# that times out only after 5 minutes
		NotifyUpdate "Wichtiges Security-Update steht seit mehr als 48 Stunden an. Neustart erforderlich." "Sofort einspielen" "Später" "Später" 300
	else
		# if reboot is needed since less than 48 hours only inform users when lunch break or home time is due
		CurrentHour=$(date '+%H')
		case ${CurrentHour} in
			12)
				NotifyUpdate "Mittagspause in Sicht und wichtiges Security-Update steht an. Neustart leider erforderlich." "Sofort einspielen" "Später" "Später" 60
				;;
			17|18|19|20|21|22|23)
				NotifyUpdate "Feierabend in Sicht und wichtiges Security-Update steht an. Neustart leider erforderlich." "Sofort einspielen" "Später" "Später" 60
				;;
			*)
				:
				;;
		esac
	fi
elif [ -s /var/run/de.arts-others.softwareupdatecheck.old -a "X${CheckNeeded}" = "X/var/run/de.arts-others.softwareupdatecheck" ]; then
	NotifyUpdate "Kleines Security-Update steht an, das keinen Neustart erfordert, also kurz und schmerzlos direkt eingespielt werden kann." "Los geht's" "Später" "Los geht's" 60
fi

###############################
# Things up for takers:
###############################
# *OSX SW Raid status
# *launchctl daemon status
# *OSX Server specific stuff, LDAP, etc...
# *Rewrite cpu / ps check to be faster - takes >1s on my laptop
# ioreg -l zeigt etliche interessante Inventurdaten


# MK's Remote Plugin Executor
if [ -e "$MK_CONFDIR/mrpe.cfg" ]
then
	grep -Ev '^[[:space:]]*($|#)' "$MK_CONFDIR/mrpe.cfg" | \
	while read descr cmdline
	do
		interval=
		args="-m"
		# NOTE: Due to an escaping-related bug in some old bash versions
		# (3.2.x), we have to use an intermediate variable for the pattern.
		pattern='\(([^\)]*)\)[[:space:]](.*)'
		if [[ $cmdline =~ $pattern ]]
		then
			parameters=${BASH_REMATCH[1]}
			cmdline=${BASH_REMATCH[2]}

			# split multiple parameter assignments
			for par in $(echo "$parameters" | tr ":" "\n")
			do
				# split each assignment
				key=$(echo "$par" | cut -d= -f1)
				value=$(echo "$par" | cut -d= -f2)

				if [ "$key" = "interval" ] ; then
					interval=$value
				elif [ "$key" = "appendage" ] ; then
					args="-ma"
				fi
			done
		fi

		if [ -z "$interval" ]
		then
			run_mrpe "$descr" "$cmdline"
		else
			run_cached "$args" "$descr" "$interval" "$cmdline"
		fi
	done
fi

# MK's runas Executor
if [ -e "$MK_CONFDIR/runas.cfg" ]
then
	grep -Ev '^[[:space:]]*($|#)' "$MK_CONFDIR/runas.cfg" | \
	while read type user include
	do
		if [ -d "$include" -o \( "$type" == "mrpe" -a -f "$include" \) ] ; then
			PREFIX=""
			if [ "$user" != "-" ] ; then
				PREFIX="su $user -c "
			fi

			# mrpe includes
			if [ "$type" == "mrpe" ] ; then
				grep -Ev '^[[:space:]]*($|#)' "$include" | \
				while read descr cmdline
				do
					interval=
					# NOTE: Due to an escaping-related bug in some old bash
					# versions (3.2.x), we have to use an intermediate variable
					# for the pattern.
					pattern='\(([^\)]*)\)[[:space:]](.*)'
					if [[ $cmdline =~ $pattern ]]
					then
						parameters=${BASH_REMATCH[1]}
						cmdline=${BASH_REMATCH[2]}

						# split multiple parameter assignments
						for par in $(echo "$parameters" | tr ":" "\n")
						do
							# split each assignment
							IFS='=' read key value <<< $par
							if [ "$key" = "interval" ]
							then
								interval=$value
							# no other parameters supported currently
							fi
						done
					fi

					if [ -n "$PREFIX" ] ; then
						cmdline="$PREFIX\'$cmdline\'"
					fi
					if [ -z "$interval" ]
					then
						run_mrpe "$descr" "$cmdline"
					else
						run_cached -m "$descr" "$interval" "$cmdline"
					fi
				done

			# local and plugin includes
			elif [ "$type" == "local" -o "$type" == "plugin" ] ; then
				if [ "$type" == "local" ] ; then
					echo "<<<local>>>"
				fi

				find "$include" -executable -type f | \
				while read filename
				do
					if [ -n "$PREFIX" ] ; then
						cmdline="$PREFIX\"$filename\""
					else
						cmdline=$filename
					fi

					$cmdline
				done
			fi
		fi
	done
fi

function is_valid_plugin () {
	# NOTE: Due to an escaping-related bug in some old bash versions
	# (3.2.x), we have to use an intermediate variable for the pattern.
	pattern='\.dpkg-(new|old|temp)$'
	#TODO Maybe we should change this mechanism
	# shellcheck disable=SC2015
	[[ -f "$1" && -x "$1" && ! "$1" =~ $pattern ]] && true || false
}

# Local checks
if cd "${LOCALDIR}" 2>/dev/null ; then
	echo '<<<local>>>'
	for skript in ./*; do
		if is_valid_plugin "$skript"; then
			./"$skript"
		fi
	done
	# Call some plugins only every X'th second
	for skript in [1-9]*/* ; do
		if is_valid_plugin "$skript"; then
			run_cached "local_${skript//\//\\}" "${skript%/*}" "$skript"
		fi
	done
fi

# Plugins
if cd "${PLUGINSDIR}" 2>/dev/null ; then
	for skript in ./*; do
		if is_valid_plugin "$skript"; then
			./"$skript"
		fi
	done
	# Call some plugins only every Xth second
	for skript in [1-9]*/* ; do
		if is_valid_plugin "$skript"; then
			run_cached "plugins_${skript//\//\\}" "${skript%/*}" "$skript"
		fi
	done
fi

# Agent output snippets created by cronjobs, etc.
if [ -d "${SPOOLDIR}" ]
then
	pushd "${SPOOLDIR}" > /dev/null || exit 1
	now=$(date +%s)

	for file in *
	do
		test "$file" = "*" && break
		# output every file in this directory. If the file is prefixed
		# with a number, then that number is the maximum age of the
		# file in seconds. If the file is older than that, it is ignored.
		maxage=""
		part="$file"

		# Each away all digits from the front of the filename and
		# collect them in the variable maxage.
		while [ "${part/#[0-9]/}" != "$part" ]
		do
			maxage=$maxage${part:0:1}
			part=${part:1}
		done

		# If there is at least one digit, than we honor that.
		if [ "$maxage" ] ; then
			mtime=$(stat -f %Sm -t %s "$file")
			if [ $((now - mtime)) -gt "$maxage" ] ; then
				continue
			fi
		fi

		# Output the file
		cat "$file"
	done
	popd > /dev/null
fi
